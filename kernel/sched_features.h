/*
 * Only give sleepers 50% of their service deficit. This allows
 * them to run sooner, but does not allow tons of sleepers to
 * rip the spread apart.
 */
SCHED_FEAT(FAIR_SLEEPERS, 0)		 /* Apply to all wakeups */
SCHED_FEAT(FAIR_SLEEPERS_INTERACTIVE, 1) /* Selects interactive wakeups */
SCHED_FEAT(FAIR_SLEEPERS_TIMER, 1)	 /* Selects timer-driven wakeups */
SCHED_FEAT(GENTLE_FAIR_SLEEPERS, 1)

/*
 * Place new tasks ahead so that they do not starve already running
 * tasks
 */
SCHED_FEAT(START_DEBIT, 1)

/*
 * Should wakeups try to preempt running tasks.
 */
SCHED_FEAT(WAKEUP_PREEMPT, 1)

/*
 * Based on load and program behaviour, see if it makes sense to place
 * a newly woken task on the same cpu as the task that woke it --
 * improve cache locality. Typically used with SYNC wakeups as
 * generated by pipes and the like, see also SYNC_WAKEUPS.
 */
SCHED_FEAT(AFFINE_WAKEUPS, 1)

/*
 * Prefer to schedule the task that ran last (when we did
 * wake-preempt) as that likely will touch the same data, increases
 * cache locality.
 */
SCHED_FEAT(LAST_BUDDY, 1)

/*
 * Consider buddies to be cache hot, decreases the likelyness of a
 * cache buddy being migrated away, increases cache locality.
 */
SCHED_FEAT(CACHE_HOT_BUDDY, 1)

/*
 * Use arch dependent cpu power functions
 */
SCHED_FEAT(ARCH_POWER, 0)

SCHED_FEAT(HRTICK, 0)
SCHED_FEAT(DOUBLE_TICK, 0)
SCHED_FEAT(LB_BIAS, 1)
SCHED_FEAT(LB_SHARES_UPDATE, 1)
SCHED_FEAT(ASYM_EFF_LOAD, 1)

/*
 * Push the min_vruntime spread floor value when descheduling a task. This
 * ensures the spread does not grow beyond control.
 */
SCHED_FEAT(DYN_MIN_VRUNTIME, 1)
/*
 * Input subsystem next buddy affinity. Not transitive across new task wakeups.
 */
SCHED_FEAT(INTERACTIVE, 1)
/*
 * Expedite forks performed from a wakeup chain coming from the input subsystem.
 * Depends on the INTERACTIVE feature for following the wakeup chain across
 * threads.
 */
SCHED_FEAT(INTERACTIVE_FORK_EXPEDITED, 1)
/*
 * Timer subsystem next buddy affinity. Not transitive across new task wakeups.
 */
SCHED_FEAT(TIMER, 1)
/*
 * Expedite forks performed from a wakeup chain coming from the timer subsystem.
 * Depends on the TIMER feature for following the wakeup chain across threads.
 */
SCHED_FEAT(TIMER_FORK_EXPEDITED, 1)

/*
 * Spin-wait on mutex acquisition when the mutex owner is running on
 * another cpu -- assumes that when the owner is running, it will soon
 * release the lock. Decreases scheduling overhead.
 */
SCHED_FEAT(OWNER_SPIN, 1)
